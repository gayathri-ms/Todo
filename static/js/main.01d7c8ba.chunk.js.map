{"version":3,"sources":["components/theme.tsx","components/todo.tsx","components/todolist.tsx","components/toggle.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["initialState","theme","setTheme","Theme","createContext","Todo","todo","todos","setValue","setTodos","i","value","useState","isEdit","setIsedit","useContext","className","id","style","display","flexDirection","type","placeholder","title","onChange","e","target","onClick","newtodo","filter","index","Todolist","input","setInput","length","map","Toggle","textAlign","App","Provider","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.01d7c8ba.chunk.js","sourcesContent":["import { createContext } from \"react\"\r\n\r\nexport interface Themetype {\r\n\ttheme : boolean,\r\n\tsetTheme : (theme : boolean) => void\r\n}\r\n\r\nconst initialState : Themetype = {\r\n\ttheme:false,\r\n\tsetTheme : (theme : boolean) => {}\r\n}\r\n\r\nconst Theme = createContext<Themetype>(initialState);\r\n\r\nexport default Theme;","import React , {useState , useContext} from \"react\"\r\nimport Theme from \"./theme\"\r\n\r\ninterface obj {\r\n\ttitle:string\r\n}\r\n\r\ninterface prop {\r\n\ttodo:obj ,\r\n\tsetValue: (value : obj) => void ,\r\n\ttodos: obj[],\r\n\tsetTodos: (todos : obj[]) => void ,\r\n\ti: any ,\r\n\tvalue:obj\r\n}\r\n\r\nconst Todo = ({todo , setValue , todos , setTodos , i , value} : prop) => {\r\n\r\n\tconst [isEdit , setIsedit] = useState<boolean>(false);\r\n\tconst { theme , setTheme } = useContext(Theme)\r\n\r\n\treturn(\r\n\t\t<div className={ theme ? \"card card_dark\" : \"card\" } id={i} style={{display:\"flex\" , flexDirection:\"column\"}}>\r\n\t\t\t\r\n\t\t\t<div>\r\n\t\t\t{\r\n\t\t\t\t!isEdit ? \r\n\t\t\t\t<div >\r\n\t\t\t\t\t<p className=\"todo_title\" > {todo.title} </p>\r\n\t\t\t\t\t<p className=\"todo_done\" >Completed<input type=\"checkbox\" className=\"todo_chkbx\" /></p>\r\n\t\t\t\t</div> :\r\n\t\t\t\t<div style={{display:\"inline-flex\"}} >\r\n\t\t\t\t\t<input className=\"todo_input\" type=\"text\" placeholder={todo.title} \r\n\t\t\t\t\t onChange={(e) => {\r\n\t\t\t\t\t \ttodo.title=e.target.value\r\n\t\t\t\t\t }}\r\n\t\t\t\t\t/>\r\n\t\t\t\t</div>\r\n\t\t\t}\r\n\t\t\t\t<div>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t!isEdit ? \r\n\t\t\t\t\t\t<button className= \"todo_btn\"  onClick={() => setIsedit(!isEdit)} > \r\n\t\t\t\t\t\tEdit</button> :  \r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t<button className= \"todo_btn\" \r\n\t\t\t\t\t\tonClick={() => {\r\n\t\t\t\t\t\t\tsetIsedit(!isEdit)\r\n\t\t\t\t\t\t\tsetTodos([...todos])\r\n\t\t\t\t\t\t} }> \r\n\t\t\t\t\t\tDone</button>\r\n\t\t\t\t\t }\r\n\t\t\t\t\t\r\n\t\t\t\t\t<button className=\"todo_btn\" \r\n\t\t\t\t\t onClick={() => {\r\n\t\t\t\t\t \tconst newtodo : obj[] = todos.filter((todo :obj , index : Number) => i!==index);\r\n\t\t\t\t\t\tsetTodos(newtodo)\r\n\t\t\t\t\t }}\r\n\t\t\t\t\t >Delete</button>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t\t);\r\n}\r\n\r\nexport default Todo;","import React , {useState , useContext} from \"react\"\r\nimport Todo from \"./todo\"\r\nimport Theme from \"./theme\"\r\n\r\ninterface obj {\r\n\ttitle:string\r\n}\r\n\r\nconst Todolist = () => {\r\n\r\n\t\r\n\tconst [input , setInput] = useState<string>(\"\");\r\n\tconst [todos , setTodos] = useState<obj[]>([]);\r\n\tconst [value , setValue] = useState<obj>({\r\n\t\ttitle: \"\"\r\n\t})\r\n\r\n\tconst { theme , setTheme } = useContext(Theme)\r\n\r\n\tconst onHandlechange = () => {\r\n\t\tif(input !== \"\")\r\n\t\t{\r\n\t\t\tsetTodos([...todos , value]);\r\n\t\t\tsetValue({ ...value ,\r\n\t\t\t\ttitle:\"\"\r\n\t\t\t})\r\n\t\t\tsetInput(\"\")\r\n\t\t}\r\n\t\t\r\n\t}\r\n\r\n\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t<div className=\"todo\" >\r\n\t\t\t\t<input className={ theme ? \"input inp_dark\" : \"input\" }  type=\"text\" value={input} \r\n\t\t\t\tonChange = {(e) => {\r\n\t\t\t\t\tsetValue({...value , title:e.target.value}) \r\n\t\t\t\t\tsetInput(e.target.value)\r\n\t\t\t\t} }/>\r\n\t\t\t\t<button className={ theme ? \"btn btn_dark\" : \"btn\" } \r\n\t\t\t\tonClick={onHandlechange}\r\n\t\t\t\t>Add Todo </button>\r\n\t\t\t</div>\r\n\t\t\t{/*{console.log(todos)}*/}\r\n\t\t\t{\t\r\n\t\t\t\ttodos.length !== 0 ?\r\n\t\t\t\t(\r\n\t\t\t\t\ttodos.map((todo , index) => {\r\n\t\t\t\t\treturn (\r\n\t\t\t\t\t\t<Todo todo ={todo} setValue={setValue} \r\n\t\t\t\t\t\t\ttodos={todos} setTodos={setTodos} \r\n\t\t\t\t\t\t\tkey={index} i={index} value={value} />\r\n\t\t\t\t\t\t);\r\n\t\t\t\t\t})\r\n\t\t\t\t) : \r\n\t\t\t\t<div>Add New Items</div> \r\n\t\t\t} \r\n\t\t\t\r\n\t\t</div>\r\n\t\t);\r\n}\r\n\r\nexport default Todolist;","import React , { useContext } from \"react\"\r\nimport Theme from \"./theme\"\r\n\r\nconst Toggle = () => {\r\n\tconst { theme , setTheme } = useContext(Theme)\r\n\r\n\treturn (\r\n\t\t<div style={{textAlign : \"right\"}} >\r\n\t\t\t<button className={ !theme ? \"theme_btn\" : \"theme_btn dark\" } onClick={() => setTheme(!theme)} >\r\n\t\t\t\t{!theme ? \"Light\" : \"Dark\"} \r\n\t\t\t</button>\r\n      \t</div>\t\r\n\t\t);\r\n}\r\n\r\nexport default Toggle;","import React, { useContext , useState } from 'react';\nimport './App.css';\nimport Todolist from \"./components/todolist\"\nimport Theme , {Themetype} from \"./components/theme\"\nimport Toggle from \"./components/toggle\"\n\nconst  App = () => {\n\tconst [ theme , setTheme ] = useState<boolean>(false)\n\n  return (\n  \t<Theme.Provider value={{theme , setTheme}} >\n    \t<div className={ theme ? \"appdark App\" : \"App\" }>\n    \t\t<Toggle />\n    \t\t<Todolist />\n      \t</div>\n    </Theme.Provider>\n   \n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}